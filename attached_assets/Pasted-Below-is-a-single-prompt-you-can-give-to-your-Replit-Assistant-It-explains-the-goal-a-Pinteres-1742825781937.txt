Below is a **single prompt** you can give to your Replit Assistant. It explains the goal (a Pinterest-style feed), includes relevant details (React, Tailwind, `react-masonry-css`), and provides a **complete** code snippet for your Replit Assistant to implement:

---

```markdown
You are a full-stack engineer using React, Tailwind CSS, and `react-masonry-css` to create a Pinterest-style feed for displaying entries. Implement the following code exactly as shown, ensuring each card has its own height and images maintain their natural aspect ratio.

---

## 1. Dependencies

- **Install**:
  ```bash
  npm install react-masonry-css clsx
  ```
- **Confirm** you have Tailwind CSS set up.

---

## 2. Full Code Example

Create a file named `EntryMasonryGrid.tsx` (or `.jsx`) with the following:

```tsx
import React, { useState } from "react";
import Masonry from "react-masonry-css";
import clsx from "clsx";

// Replace with your actual Entry type and Card component imports:
import { Entry } from "@shared/schema";
import { Card } from "@/components/ui/card";

interface EntryCardProps {
  entry: Entry;
  onEdit: (entry: Entry) => void;
}

function EntryCard({ entry, onEdit }: EntryCardProps) {
  const [dimensions, setDimensions] = useState<{ width: number; height: number } | null>(null);

  const handleImageLoad = (e: React.SyntheticEvent<HTMLImageElement>) => {
    const img = e.currentTarget;
    setDimensions({
      width: img.naturalWidth,
      height: img.naturalHeight,
    });
  };

  const cardClasses = clsx(
    "overflow-hidden group cursor-pointer hover:shadow-lg transition-all",
    "mb-4" // margin bottom so cards don't overlap in the same column
  );

  return (
    <Card className={cardClasses} onClick={() => onEdit(entry)}>
      {entry.imageUrl && (
        <img
          src={entry.imageUrl}
          alt={entry.title}
          onLoad={handleImageLoad}
          className="w-full h-auto" // Preserves natural aspect ratio
        />
      )}
      <div className="p-4">
        <h3 className="font-semibold mb-1">{entry.title}</h3>
        <p className="text-sm text-muted-foreground">
          {new Date(entry.createdAt).toLocaleDateString()}
        </p>
      </div>
    </Card>
  );
}

interface EntryMasonryGridProps {
  entries: Entry[];
  onEditEntry: (entry: Entry) => void;
}

export function EntryMasonryGrid({ entries, onEditEntry }: EntryMasonryGridProps) {
  // Define responsive breakpoints for columns
  const breakpointColumnsObj = {
    default: 3,
    1024: 2,
    640: 1,
  };

  return (
    <Masonry
      breakpointCols={breakpointColumnsObj}
      className="my-masonry-grid flex -ml-4 w-auto"
      columnClassName="my-masonry-grid_column pl-4 bg-clip-padding"
    >
      {entries.map((entry) => (
        <EntryCard key={entry.id} entry={entry} onEdit={onEditEntry} />
      ))}
    </Masonry>
  );
}
```

---

## 3. Tailwind/CSS Adjustments

If desired, you can add extra styles to a global CSS file (e.g., `global.css`) to handle spacing:

```css
.my-masonry-grid_column > div {
  margin-bottom: 1rem; /* space between cards */
}
```

*(If you rely on Tailwind utilities, you can skip adding CSS here, as the `.mb-4` class on each card already provides spacing.)*

---

## 4. Explanation

1. **`react-masonry-css`**: Creates a column-based layout, allowing each cardâ€™s height to be independent (true Pinterest-like).
2. **`className="w-full h-auto"`**: Ensures images keep their natural aspect ratio.
3. **No fixed height**: Cards with text only or tall/wide images each take up just as much space as needed.

Implement this exactly, ensuring the dependencies are installed, and you will have a working Pinterest-style feed.
```