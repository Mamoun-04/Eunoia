import React, { useState, useRef, useEffect } from 'react';
import { Button } from './button';
import { Card } from './card';
import { MessageCircle, X, Send, Maximize2, Minimize2 } from 'lucide-react';
import { Input } from './input';
import { ScrollArea } from './scroll-area';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

export function FloatingChat() {
  const [isOpen, setIsOpen] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([{
    role: 'assistant',
    content: "Welcome to the Islamic Wisdom Assistant. I'm here to provide comfort and guidance through Quranic verses and authentic Hadiths. I can help you find relevant wisdom from Islamic teachings, but please note that I cannot provide religious rulings - those should be obtained from qualified scholars."
  }]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = input.trim();
    setInput('');
    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);
    setIsLoading(true);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userMessage })
      });

      const data = await response.json();
      setMessages(prev => [...prev, { role: 'assistant', content: data.message }]);
    } catch (error) {
      console.error('Chat error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={`fixed z-50 ${isFullscreen ? 'inset-0' : 'bottom-4 right-4 sm:bottom-8 sm:right-8'}`}>
      {isOpen ? (
        <Card className={`${isFullscreen ? 'fixed inset-0 w-full h-full' : 'w-[90vw] h-[80vh] sm:w-[350px] sm:h-[500px]'} flex flex-col bg-[#300101]/90 border-[#e8d5b5]/10 transition-all duration-300`}>
          <div className="flex items-center justify-between p-4 border-b border-[#e8d5b5]/10">
            <h3 className="text-[#e8d5b5] font-semibold">Islamic Wisdom Assistant</h3>
            <div className="flex gap-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setMessages([{
                  role: 'assistant',
                  content: "Welcome to the Islamic Wisdom Assistant. I'm here to provide comfort and guidance through Quranic verses and authentic Hadiths. I can help you find relevant wisdom from Islamic teachings, but please note that I cannot provide religious rulings - those should be obtained from qualified scholars."
                }])}
                className="text-[#e8d5b5] hover:bg-[#4a0404]"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path></svg>
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsFullscreen(!isFullscreen)}
                className="text-[#e8d5b5] hover:bg-[#4a0404]"
              >
                {isFullscreen ? (
                  <Minimize2 className="h-4 w-4" />
                ) : (
                  <Maximize2 className="h-4 w-4" />
                )}
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => {
                  setIsFullscreen(false);
                  setIsOpen(false);
                }}
                className="text-[#e8d5b5] hover:bg-[#4a0404]"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>

          <ScrollArea className="flex-1 p-4" ref={scrollRef}>
            <div className="space-y-4">
              {messages.map((msg, i) => (
                <div
                  key={i}
                  className={`flex ${
                    msg.role === 'user' ? 'justify-end' : 'justify-start'
                  } mb-4`}
                >
                  <div
                    className={`max-w-[80%] rounded-lg px-4 py-3 ${
                      msg.role === 'user'
                        ? 'bg-[#e8d5b5] text-[#300101]'
                        : 'bg-[#4a0404] text-[#e8d5b5]'
                    }`}
                  >
                    {msg.role === 'assistant' && msg.content.includes('﴿﴾') ? (
                      <div className="space-y-4">
                        {msg.content.split('\n').map((part, idx) => {
                          if (part.includes('﴿﴾')) {
                            return (
                              <div key={idx} className="text-right">
                                <p className="font-arabic text-lg leading-loose">{part}</p>
                              </div>
                            );
                          }
                          return <p key={idx} className="leading-relaxed">{part}</p>;
                        })}
                      </div>
                    ) : (
                      <div className="whitespace-pre-line leading-relaxed">
                        {msg.content}
                      </div>
                    )}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-[#4a0404] text-[#e8d5b5] max-w-[80%] rounded-lg px-4 py-3">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-[#e8d5b5] rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                      <div className="w-2 h-2 bg-[#e8d5b5] rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                      <div className="w-2 h-2 bg-[#e8d5b5] rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>

          <form onSubmit={handleSubmit} className="p-4 border-t border-[#e8d5b5]/10">
            <div className="flex gap-2">
              <Input
                value={input}
                onChange={e => setInput(e.target.value)}
                placeholder="Ask a question..."
                className="flex-1 bg-[#4a0404] text-[#e8d5b5] border-[#e8d5b5]/20"
              />
              <Button
                type="submit"
                disabled={isLoading}
                className="bg-[#e8d5b5] text-[#300101] hover:bg-[#e8d5b5]/90"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </form>
        </Card>
      ) : (
        <Button
          onClick={() => setIsOpen(true)}
          className="rounded-full w-12 h-12 bg-[#e8d5b5] text-[#300101] hover:bg-[#e8d5b5]/90 shadow-lg"
        >
          <MessageCircle className="h-6 w-6" />
        </Button>
      )}
    </div>
  );
}